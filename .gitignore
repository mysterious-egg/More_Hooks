JC Chouinard
About
Python SEO
Git & Github
Machine Learning
API
Buy Me a Coffee
By jean-christophe-chouinard 19 November 2020
How to Use Gitignore to Ignore Files in Github (with .gitignore Template)
This post is part of the complete guide on Git and Github

The .gitignore file is useful to specify what you want, and what you don’t want to be committed to Github.

In this post, I will give you a simple Gitignore template to make sure that you don’t commit stuff that you don’t want.

Ignoring Files in Git Using Gitignore
Ignored files are defined in a file named .gitignore that is checked in at the root of your repository. 

Subscribe to my Newsletter
Email Address
By adding a gitignore file to the root your repository, you can make sure that critical elements like your credentials and passwords does not get pushed to your public Github profile.

Create a Gitignore File
From within a directory, you can create a .gitignore file by using the Terminal.

$ cd <your-directory>
$ touch .gitignore
Follow this tutorial to learn how to create a gitignore file from VS Code.

Gitignore Template
Save this in a .gitignore extension.

$ touch .gitignore
# VSCode
.vscode/*
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
*.code-workspace
# Local History for Visual Studio Code
.history/

# Common credential files
**/credentials.json
**/client_secrets.json
**/client_secret.json
*creds*
*.dat
*password*
*.httr-oauth*

# Private Node Modules
node_modules/
creds.js

# Private Files
*.json
*.csv
*.csv.gz
*.tsv
*.tsv.gz
*.xlsx


# Mac/OSX
.DS_Store


# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/
